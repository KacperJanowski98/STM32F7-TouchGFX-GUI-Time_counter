/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef TIMEMODECONFIGVIEWBASE_HPP
#define TIMEMODECONFIGVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/timemodeconfig_screen/TimeModeConfigPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/SwipeContainer.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/scrollers/ScrollWheelWithSelectionStyle.hpp>
#include <gui/containers/ChannelContainer.hpp>
#include <gui/containers/ChannelContainerCenter.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/widgets/RadioButton.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/RadioButtonGroup.hpp>

class TimeModeConfigViewBase : public touchgfx::View<TimeModeConfigPresenter>
{
public:
    TimeModeConfigViewBase();
    virtual ~TimeModeConfigViewBase() {}
    virtual void setupScreen();

    virtual void scrollWheelINPUTUpdateItem(ChannelContainer& item, int16_t itemIndex)
    {
        // Override and implement this function in TimeModeConfig
    }

    virtual void scrollWheelINPUTUpdateCenterItem(ChannelContainerCenter& item, int16_t itemIndex)
    {
        // Override and implement this function in TimeModeConfig
    }

    /*
     * Virtual Action Handlers
     */
    virtual void ChangeChannelState()
    {
        // Override and implement this function in TimeModeConfig
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box boxLeftBackG;
    touchgfx::Box boxRightBackG;
    touchgfx::Box boxConfigTime;
    touchgfx::Button buttonBackTime;
    touchgfx::TextArea labelTimeConfig;
    touchgfx::Box boxBacgroundTC;
    touchgfx::SwipeContainer swipeContainerTime;
    touchgfx::Container swipeContainerTimeINPUT;
    touchgfx::Box boxINPUT;
    touchgfx::Image imageArrowR;
    touchgfx::TextArea labelINPUT;
    touchgfx::TextAreaWithOneWildcard textChannelINPUT;
    touchgfx::ScrollWheelWithSelectionStyle scrollWheelINPUT;
    touchgfx::DrawableListItems<ChannelContainer, 6> scrollWheelINPUTListItems;
    touchgfx::DrawableListItems<ChannelContainerCenter, 2> scrollWheelINPUTSelectedListItems;

    touchgfx::ToggleButton toggleChannel;
    touchgfx::RadioButton radioSlopeDown;
    touchgfx::RadioButton radioSlopeUp;
    touchgfx::TextArea textThreshold;
    touchgfx::TextArea textSlope;
    touchgfx::ButtonWithLabel buttonDetect;
    touchgfx::TextAreaWithOneWildcard textSliderThreshold;
    touchgfx::Slider sliderThreshold;
    touchgfx::RadioButton radioThresholdManual;
    touchgfx::RadioButton radioThresholdDefined;
    touchgfx::TextArea textTManual;
    touchgfx::TextAreaWithOneWildcard textTest;
    touchgfx::TextArea textTDefined;
    touchgfx::Container swipeContainerTimeCLOCK;
    touchgfx::Box boxCLOCK;
    touchgfx::Image imageArrowCL;
    touchgfx::Image imageArrowCR;
    touchgfx::TextArea labelCLOCK;
    touchgfx::Container swipeContainerTimeTISETUP;
    touchgfx::Box boxTISETUP;
    touchgfx::Image imageArrowTL;
    touchgfx::Image imageArrowTR;
    touchgfx::TextArea labelTISETUP;
    touchgfx::Container swipeContainerTimeSESSION;
    touchgfx::Box boxSESSIONSETUP;
    touchgfx::Image imageArrowSL;
    touchgfx::TextArea labelSESSIONSETUP;
    touchgfx::RadioButtonGroup<2> radioButtonGroupSlope;
    touchgfx::RadioButtonGroup<2> radioButtonGroupThreshold;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTCHANNELINPUT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textChannelINPUTBuffer[TEXTCHANNELINPUT_SIZE];
    static const uint16_t TEXTSLIDERTHRESHOLD_SIZE = 12;
    touchgfx::Unicode::UnicodeChar textSliderThresholdBuffer[TEXTSLIDERTHRESHOLD_SIZE];
    static const uint16_t TEXTTEST_SIZE = 20;
    touchgfx::Unicode::UnicodeChar textTestBuffer[TEXTTEST_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<TimeModeConfigViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<TimeModeConfigViewBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);

};

#endif // TIMEMODECONFIGVIEWBASE_HPP
